import cv2  #importowanie cv2
import numpy as np #importowanie biblioteki do macierzy
from flask import Flask, json, request, jsonify #importowanie biblioteki flask z pakietami json, request, jsonify
import os
import urllib.request
from werkzeug.utils import secure_filename


def stackImages(scale,imgArray): #funkcja, zajmująca się rozmieszczeniem i przetwarzaniem obrazu
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)    #konwersja do skali szarej, detekcja koloru(cvtColor)
        imageBlank = np.zeros((height, width, 3), np.uint8) #rysowanie obramowania do detekcji
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]: #nadawanie kształtu
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale) #zastosowanie funkcji resize do zamiany rozmiaru
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

thres = 0.45 # Threshold (próg) do wykrywania obrazu
nms_threshold = 0.3
#cap = cv2.VideoCapture(0) #wczytanie video z kamerki

img = cv2.imread('pliki/kot1.jpg') #wczytanie obrazu - zastosowanie funkcji imread

#cap.set(3,640) #szerokość
#cap.set(4,480) #wysokość
#cap.set(10,70) #jasność
classNames= []
classFile = 'detekcja/coco.names'
with open(classFile,'rt') as f:
    classNames = f.read().rstrip('\n').split('\n')
configPath = 'detekcja/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt'
weightsPath = 'detekcja/frozen_inference_graph.pb'
net = cv2.dnn_DetectionModel(weightsPath,configPath)
net.setInputSize(320,320)
net.setInputScale(1.0/ 127.5)
net.setInputMean((127.5, 127.5, 127.5))
net.setInputSwapRB(True)
#Dwie poniższe linijki służą do kamerki video(odczyt obrazu)
#while True:
#    success,img = cap.read()

classIds, confs, bbox = net.detect(img,confThreshold = thres)
bbox = list(bbox)
confs = list(np.array(confs).reshape(1,-1)[0])
confs = list(map(float,confs))
indices = cv2.dnn.NMSBoxes(bbox,confs,thres,nms_threshold)

#Wyświetlanie ilości osób
print("Detected people", len(indices))
for i in indices:

    box = bbox[i]
    x,y,w,h = box[0],box[1],box[2],box[3]
    cv2.rectangle(img, (x, y), (x + w, h + y), color=(0, 255, 0), thickness=2) #obramowanie do detekcji


    cv2.putText(img,f'{str(round(confs[i]*100,2))}%',(box[0]+125,box[1] + 30),
        cv2.FONT_HERSHEY_SIMPLEX,0.8,(0,255,0),2)

cv2.imshow("Output",img)
cv2.waitKey(0) #opóźnienie


#########API############

app = Flask(__name__)

app.secret_key = "caircocoders-ednalan"

UPLOAD_FOLDER = 'static/uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

ALLOWED_EXTENSIONS = set([ 'png', 'jpg', 'jpeg']) #pozwolenie na przesłanie plików obrazów o rozszerzeniach png, jpg, jpeg


def allowed_file(kot1):
    return '.' in kot1 and kot1.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/')
def main():
    return 'Rozpoznawanie osób na zdjęciach'
    return print("Detected people", len(indices))

@app.route('/upload', methods=['POST'])
def upload_file():
    # check if the post request has the file part
    if 'pliki[]' not in request.files:
        resp = jsonify({'message': 'No file part in the request'})
        resp.status_code = 400
        return resp

    pliki = request.files.getlist('pliki[]')

    errors = {}
    success = False

    for file in pliki:
        if file and allowed_file(file.kot1.jpg):
            filename = secure_filename(file.kot1.jpg)
            file.save(os.path.join(app.config['UPLOAD_FOLDER'], kot1.jpg))
            success = True
        else:
            errors[file.kot1.jpg] = 'File type is not allowed'

    if success and errors:
        errors['message'] = 'File(s) successfully uploaded'
        resp = jsonify(errors)
        resp.status_code = 500
        return resp
    if success:
        resp = jsonify({'message': 'Files successfully uploaded'})
        resp.status_code = 201
        return resp
    else:
        resp = jsonify(errors)
        resp.status_code = 500
        return resp


if __name__ == '__main__':
    app.run(debug=True)
